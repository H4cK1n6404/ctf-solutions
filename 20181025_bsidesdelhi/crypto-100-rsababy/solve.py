from Crypto.Util.number import *
import gmpy2
n = 143786356117385195355522728814418684024129402954309769186869633376407480449846714776247533950484109173163811708549269029920405450237443197994941951104068001708682945191370596050916441792714228818475059839352105948003874426539429621408867171203559281132589926504992702401428910240117807627890055235377744541913
e = 114194
ciphertext = 0x0c55bc89e3773d8e378121eced4f9300103a8696bc3f9a1542c5b1539442ca5de03a40ad564ab5c2e764b2f946058ec220abf20afc271896ff4ca1f4a2dd227405f221de51e097d6b9f270c4561cd25596e96efd7de1a0e65d37cbf6a73c62a7e323f48450b9dc75e3e738ec1c7e1ae9fc808da8c476e72aea9155125b815653

p = 11196022518013846406450257763680307528861440840633712357021019120934410373180406217919066924474450204377977943388931820832436504741695416094988192576484719
q = n/p
assert n == p*q

phi = (p-1)*(q-1)
g = GCD(e, phi)
assert g == 2

d = inverse(e/g, phi)
assert (e*d)%phi == g

plaintext_squared = pow(ciphertext, d, n)
print(long_to_bytes(gmpy2.isqrt(plaintext_squared)))
