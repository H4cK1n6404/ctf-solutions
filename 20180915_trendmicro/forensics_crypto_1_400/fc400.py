from  crypto_commons.generic import long_to_bytes
n = 144

p_str = '010000010110111000100000011000010111000001110000011011000110010100100000011000010110111001100100001000000110000101101110001000000110111101110010011000010110111001100111011001010010000001110111011001010110111001110100001000000111010001101111001000000101010001110010011001010110111001100100'
c_str = '000100100011000101110101001101100110001100110001001110100011110101100000011110010010111000110011001110000000110100100101011111000011000000100001010000100110011100100001011000000111001101110100011011100110000000100000011011010110001001100100001011010110111001100110001010110110110101110001'
p_m0 = int(p_str[:n], 2)
p_m1 = int(p_str[n:], 2)
p = [p_m0, p_m1]

c_m0 = int(c_str[:n], 2)
c_m1 = int(c_str[n:], 2)

s_str = '000000110000111001011100001000000001100100101100000100100111111000001001000001100000001100001001000100100010011101001010011000010111100100100010010101110100010001000010010101010100010101111111010001000110000001101001011111110111100001100101011000010010001001001011011000100111001001101011'

s_m0 = int(s_str[:n], 2)
s_m1 = int(s_str[n:], 2)


def decrypt(m0, m1):
	k0 = c_m0
	for e in m0:
		k0 ^= p[e]

	k1 = c_m1
	for e in m1:
		k1 ^= p[e]

	d_m0 = s_m0^k0
	d_m1 = s_m1^k1

	if len(m0) == 2:
		d_m0 ^= d_m1
	if len(m1) == 2:
		d_m1 ^= d_m0


	print(long_to_bytes(d_m0), long_to_bytes(d_m1))

decrypt([0,1],[0])
decrypt([0],[1])
decrypt([1],[0,1])

# TMCTF{Feistel-Cipher-Flag-TMCTF2018}
